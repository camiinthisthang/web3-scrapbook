pragma solidity ^0.8.4;

import "@openzeppelin/contracts/utils/Counters.sol";
//web3 scrapbook - 

contract Scrapbook {
    using Counters for Counters.Counter;
    Counters.Counter private _memoryId;

    constructor(){
        _memoryId.increment();
    }

    event newMemoryAdded(bytes32 memoryId, address memoryCreator, uint256 eventTimestamp, string memoryCID);

    struct Memory {
      bytes32 memoryId;
      string memoryCID;
      address memoryOwner;
      address[] friends;
      uint256 eventTimestamp;
      bool visibleToPublic;
    }

    mapping(bytes32 => Memory) public idToCard;

    function createNewMemory(
        string calldata memoryCID,
        uint eventTimestamp,
        bytes32 memoryId, //remove from here when I get the chainlink random number working
        bool visibleToPublic
    ) external {
        //get random ID generated by chainlink
        address[] memory associatedFriends;
        _memoryId.increment();
        idToCard[memoryId] = Memory(memoryId, memoryCID, msg.sender, associatedFriends, eventTimestamp, visibleToPublic);
        emit newMemoryAdded(memoryId, msg.sender, eventTimestamp, memoryCID);
    }


}

